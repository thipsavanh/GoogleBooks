{"version":3,"sources":["components/Jumbotron/index.js","utils/API.js","components/Grid/index.js","components/Form/index.js","pages/Search.js","components/List/index.js","components/BookBtn/index.js","pages/Results.js","pages/Saved.js","pages/NoMatch.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","children","style","height","clear","paddingTop","textAlign","className","query","axios","get","id","delete","bookData","post","Container","fluid","Row","Col","size","split","map","join","Input","props","FormBtn","float","marginBottom","Search","state","toResults","results","handleInputChange","e","target","name","value","setState","handleFormSubmit","preventDefault","console","log","trim","API","then","res","data","items","catch","err","this","to","pathname","onChange","placeholder","onClick","Component","List","ListItem","BookBtn","role","tabIndex","Results","books","noResults","saveBook","book","filterBooks","filter","location","index","key","href","volumeInfo","infoLink","title","authors","align","paddingRight","src","imageLinks","smallThumbnail","alt","description","btntype","disabled","author","image","link","_id","Saved","getSavedBooks","length","deleteBook","NoMatch","aria-label","Nav","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8d5027c5.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 300, clear: \"both\", paddingTop: 100, textAlign: \"center\" }}\n      className=\"jumbotron\"\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import axios from \"axios\";\n\nexport default {\n  searchBooks: function(query) {\n    return axios.get(\"/https://www.googleapis.com/books/v1/volumes?q=\" + query);\n  },\n  getSavedBooks: function() {\n    return axios.get(\"/api/books/\");\n  },\n  deleteBook: function(id) {\n    return axios.delete(\"/api/books/\" + id);\n  },\n  saveBook: function(bookData) {\n    return axios.post(\"/api/books\", bookData);\n  }\n};","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\n\n// This file exports the Input, TextArea, and FormBtn components\n\nexport function Input(props) {\n  return (\n    <div className=\"form-group\">\n      <input className=\"form-control\" {...props} />\n    </div>\n  );\n}\n\nexport function TextArea(props) {\n  return (\n    <div className=\"form-group\">\n      <textarea className=\"form-control\" rows=\"20\" {...props} />\n    </div>\n  );\n}\n\nexport function FormBtn(props) {\n  return (\n    <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\n      {props.children}\n    </button>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { Input, FormBtn } from \"../components/Form\";\n\nclass Search extends Component {\n    state = {\n        query: \"\",\n        toResults: false,\n        results: []\n    };\n\n    handleInputChange = e => {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        });\n    };\n\n    handleFormSubmit = e => {\n        e.preventDefault();\n        console.log(this.state.query);\n        if (this.state.query) {\n            const query = this.state.query.trim();\n            API.searchBooks(query)\n                .then(res => {\n                    console.log(res.data.items);\n                    this.setState({\n                        toResults: true,\n                        results: res.data.items\n                    });\n                })\n                .catch(err => console.log(err));\n        }\n    };\n\n    render() {\n        if (this.state.toResults) {\n            return <Redirect to={{\n                pathname: \"/results\",\n                data: { results: this.state.results }\n            }} />\n        }\n        return (\n            <div>\n                <Row>\n                    <Col size=\"md-12\">\n                        <Jumbotron>\n                            <h1>Google Books Search</h1>\n                            <p>Search For Books and Save The Books That Interest You</p>\n                        </Jumbotron>\n                        <Container fluid>\n                            <form>\n                                <Input\n                                    value={ this.state.query }\n                                    onChange={ this.handleInputChange }\n                                    name=\"query\"\n                                    placeholder=\"Title (required)\"\n                                />\n                                <FormBtn\n                                    className=\"btn btn-info\"\n                                    onClick={ this.handleFormSubmit }\n                                >\n                                    Search\n                               </FormBtn>\n                            </form>\n                        </Container>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Search;","import React from \"react\";\nimport \"./style.css\";\n\n// This file exports both the List and ListItem components\n\nexport function List({ children }) {\n  return (\n    <div className=\"list-overflow-container\">\n      <ul className=\"list-group\">{children}</ul>\n    </div>\n  );\n}\n\nexport function ListItem({ children }) {\n  return <li className=\"list-group-item\">{children}</li>;\n}\n","import React from \"react\";\nimport \"./style.css\";\n\n// The ...props means, spread all of the passed props onto this element\n// That way we don't have to define them all individually\nfunction BookBtn(props) {\n  return (\n    <span className=\"book-btn\" {...props} role=\"button\" tabIndex=\"0\">\n      ✗\n    </span>\n  );\n}\n\nexport default BookBtn;\n","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport BookBtn from \"../components/BookBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\n\nclass Results extends Component {\n    state = {\n        books: [],\n        target: \"\",\n        noResults: false\n    };\n\n    componentDidMount() {\n        const data = this.props.location.data\n        if (data && data.results > 0) {\n            this.setState({\n                books: data.results.filter((value, index) => index < 5),\n                target: \"_blank\"\n            });\n        } else {\n            this.setState({\n                noResults: true\n            });\n        }\n    }\n\n    saveBook = book => {\n        API.saveBook(book)\n            .then(res => {\n                const currentBooks = this.state.books;\n                const filterBooks = currentBooks.filter(book => book.id !== res.data.id);\n                this.setState({\n                    books: filterBooks\n                });\n            })\n            .catch(err => console.log(err));\n    }\n\n    render() {\n        if (this.state.noResults) {\n            return (\n                <div>\n                    <Row>\n                        <Col size=\"md-12\">\n                            <Jumbotron>\n                                <h1>Google Books Search</h1>\n                                <p>Search For Books and Save The Books That Interest You</p>\n                            </Jumbotron>\n                            <Container>\n                                <Link to=\"/\"> No results. Click here to start search again.</Link>\n                            </Container>\n                        </Col>\n                    </Row>\n                </div>\n            )\n        }\n        return (\n            <div>\n                <Jumbotron>\n                    <h1>Google Books Search</h1>\n                    <p>Search For Books and Save The Books That Interest You</p>\n                </Jumbotron>\n                <Container>\n                    <h2>Results</h2>\n                    <List>\n                        {this.state.books.map((book, index) => (\n                            <ListItem key={ book.id }>\n                                <div className=\"date-div\">\n                                    <a\n                                        key={ \"\" + index + book.id }\n                                        href={ book.volumeInfo.infoLink }\n                                        target={ this.state.target }\n                                    >\n                                        { book.volumeInfo.title }\n                                    </a>\n                                    <p>Author: { book.volumeInfo.authors[0] }</p>\n                                    <p>\n                                        <img align=\"left\" style={{ paddingRight: 10 }}\n                                             src={ book.volumeInfo.imageLinks.smallThumbnail } alt=\"new\"\n                                        />\n                                        { book.volumeInfo.description }\n                                    </p>\n                                </div>\n                                <div className=\"book-btn-div\">\n                                    <BookBtn\n                                        key={ \"\" + book.id + index }\n                                        btntype=\"info\"\n                                        disabled={ book.volumeInfo.infoLink === \"/\" }\n                                        onClick={() => this.saveBook({\n                                            title: book.volumeInfo.title,\n                                            author: book.volumeInfo.authors[0],\n                                            description: book.volumeInfo.description,\n                                            image: book.volumeInfo.imageLinks.smallThumbnail,\n                                            link: book.volumeInfo.infoLink,\n                                            _id: book.id\n                                        })}\n                                    >\n                                        Save\n                                     </BookBtn>\n                                </div>\n                            </ListItem>\n                        ))}\n                    </List>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Results;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport BookBtn from \"../components/BookBtn\";\n\nclass Saved extends Component {\n    state = {\n        books: [],\n        target: \"\",\n        noResults: false\n    };\n\n    componentDidMount() {\n        this.getSavedBooks();\n    }\n    \n    getSavedBooks = () => {\n        API.getSavedBooks()\n        .then(res => {\n            if (res.data.length > 0) {\n                this.setState({\n                    books: res.data,\n                    target: \"_blank\"\n                });\n            } else {\n                this.setState({\n                    noResults: true\n                });\n            }\n        })\n        .catch(err => console.log(err));\n    }\n\n    deleteBook = id => {\n        API.deleteBook(id)\n        .then(res => this.getSavedBooks())\n        .catch(err => console.log(err));\n    }\n\n    render() {\n        if (this.state.noResults) {\n            return (\n                <div>\n                    <Row>\n                        <Col size=\"md-12\">\n                            <Jumbotron>\n                                <h1>Google Books Search</h1>\n                                <p>Search For Books and Save The Books That Interest You</p>\n                            </Jumbotron>\n                            <Container>\n                                <Link to=\"/\"> You don't have any books saved. Click here to start search again.</Link>\n                            </Container>\n                        </Col>\n                    </Row>\n                </div>\n            )\n        }\n        return (\n            <div>\n                <Jumbotron>\n                    <h1>Google Books Search</h1>\n                    <p>Search For Books and Save The Books That Interest You</p>\n                </Jumbotron>\n                <Container>\n                    <h2>Saved Books</h2>\n                    <List>\n                        {this.state.books.map(book => (\n                            <ListItem key={book._id}>\n                                <div className=\"date-div\">\n                                    <a\n                                        key={ book._id + \"link\" }\n                                        href={ book.link }\n                                        target={ this.state.target }\n                                    >\n                                        { book.title }\n                                    </a>\n                                    <p>Author: { book.author }</p>\n                                    <p>\n                                        <img align=\"left\" style={{ paddingRight: 10 }}\n                                             src={ book.image } alt=\"new\"\n                                        />\n                                        { book.description }\n                                    </p>\n                                </div>\n                                <div className=\"book-btn-div\">\n                                    <BookBtn\n                                        key={ book._id + \"btn\" }\n                                        btntype=\"info\"\n                                        id={ book._id }\n                                        disabled={ book.link === \"/\" }\n                                        onClick={ () => this.deleteBook(\n                                            book._id\n                                        ) }\n                                    >\n                                        Delete\n                                     </BookBtn>\n                                </div>\n                            </ListItem>\n                        ))}\n                    </List>\n                </Container>\n            </div>\n            );\n        }\n    }\n\n    export default Saved;","import React from \"react\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nfunction NoMatch() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col size=\"md-12\">\n          <Jumbotron>\n            <h1>404 Page Not Found</h1>\n            <h1>\n              <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n                🙄\n              </span>\n            </h1>\n          </Jumbotron>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default NoMatch;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Google Books\n      </a>\n      <p>\n      <Link className=\"btn btn-secondary btn-lg\" to=\"/\">Search for Books</Link>\n      <Link className=\"btn btn-dark btn-lg\" to=\"/saved\">Saved Books</Link>\n      </p>\n      \n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Search from \"./pages/Search\";\nimport Results from \"./pages/Results\";\nimport Saved from \"./pages/Saved\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Nav from \"./components/Nav\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Switch>\n        <Route exact path=\"/\" component={Search} />\n        <Route exact path=\"/results\" component={Results} />\n        <Route exact path=\"/saved\" component={Saved} />\n        <Route component={NoMatch} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}